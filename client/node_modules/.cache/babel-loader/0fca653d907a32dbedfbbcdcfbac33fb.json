{"ast":null,"code":"var _jsxFileName = \"/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport Paper from '@mui/material/Paper';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageTwo = ({\n  data = []\n}) => {\n  _s();\n\n  const [rows, setRows] = useState();\n\n  const processUrl = src => {\n    var request = new XMLHttpRequest();\n    request.open('GET', src);\n    request.responseType = 'blob';\n\n    request.onload = function () {\n      if (request.status === 200) {\n        console.log('success');\n        return true;\n      } else {\n        console.log('fail');\n        return false;\n      }\n    };\n\n    request.send();\n  };\n\n  const processImage = src => {\n    const img = new Image();\n\n    img.onload = () => {\n      console.log('onload', img.width);\n      return {\n        width: img.width,\n        height: img.height\n      };\n    };\n\n    img.src = src;\n  };\n\n  const createRow = row => {\n    console.log('row', row);\n\n    if (row.width && row.width !== 0) {\n      return /*#__PURE__*/_jsxDEV(SuccessRow, {\n        row: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ErrorRow, {\n      row: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  };\n\n  const aggregateData = () => {\n    const mergedData = data.map(async row => {\n      const goodUrl = processUrl(row.url);\n\n      if (goodUrl) {\n        const dimensions = await processImage(row.url);\n        console.log('dimensions', dimensions);\n        return { ...row,\n          width: dimensions.width,\n          height: dimensions.height\n        };\n      } else {\n        return { ...row,\n          width: 0,\n          height: 0\n        };\n      }\n    });\n    console.log('mergedData', mergedData);\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650,\n        maxWidth: 800,\n        margin: '0 auto'\n      },\n      \"aria-label\": \"simple table\",\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows && rows.map(row => createRow(row))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PageTwo, \"cMn46HMmfsVf4gpe7bT6j+QWbN0=\");\n\n_c = PageTwo;\nexport default PageTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageTwo\");","map":{"version":3,"sources":["/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx"],"names":["useEffect","useState","Table","TableBody","TableContainer","Paper","SuccessRow","ErrorRow","PageTwo","data","rows","setRows","processUrl","src","request","XMLHttpRequest","open","responseType","onload","status","console","log","send","processImage","img","Image","width","height","createRow","row","aggregateData","mergedData","map","goodUrl","url","dimensions","minWidth","maxWidth","margin"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport Paper from '@mui/material/Paper';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\n\nconst PageTwo = ({ data = [] }) => {\n  const [rows, setRows] = useState();\n\n  const processUrl = (src) => {\n    var request = new XMLHttpRequest();\n    request.open('GET', src);\n    request.responseType = 'blob';\n\n    request.onload = function () {\n      if (request.status === 200) {\n        console.log('success');\n        return true;\n      } else {\n        console.log('fail');\n        return false;\n      }\n    };\n\n    request.send();\n  };\n\n  const processImage = (src) => {\n    const img = new Image();\n    img.onload = () => {\n      console.log('onload', img.width);\n      return {\n        width: img.width,\n        height: img.height,\n      };\n    };\n    img.src = src;\n  };\n\n  const createRow = (row) => {\n    console.log('row', row);\n    if (row.width && row.width !== 0) {\n      return <SuccessRow row={row} />;\n    }\n    return <ErrorRow row={row} />;\n  };\n\n  const aggregateData = () => {\n    const mergedData = data.map(async (row) => {\n      const goodUrl = processUrl(row.url);\n      if (goodUrl) {\n        const dimensions = await processImage(row.url);\n        console.log('dimensions', dimensions);\n        return { ...row, width: dimensions.width, height: dimensions.height };\n      } else {\n        return { ...row, width: 0, height: 0 };\n      }\n    });\n    console.log('mergedData', mergedData);\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table\n        sx={{ minWidth: 650, maxWidth: 800, margin: '0 auto' }}\n        aria-label=\"simple table\"\n      >\n        <TableBody>{rows && rows.map((row) => createRow(row))}</TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default PageTwo;\n"]},"metadata":{},"sourceType":"module"}