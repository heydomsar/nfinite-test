{"ast":null,"code":"var _jsxFileName = \"/Users/domsardina/Development/nfinite-test/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { AppBar, Box, Button, Step, StepButton, Stepper, Toolbar, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst steps = ['Products', 'Results'];\n\nconst App = () => {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [completed, setCompleted] = useState({});\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"static\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"div\",\n            sx: {\n              flexGrow: 1\n            },\n            children: \"nfinite - Product Upload Test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        margin: '20px auto',\n        width: '75%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: activeStep,\n        children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepButton, {\n            color: \"inherit\",\n            onClick: handleStep(index),\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            mt: 2,\n            mb: 1\n          },\n          children: [\"Step \", activeStep + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            flexDirection: 'row',\n            pt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            disabled: activeStep === 0,\n            onClick: handleBack,\n            sx: {\n              mr: 1\n            },\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: '1 1 auto'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleNext,\n            sx: {\n              mr: 1\n            },\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            sx: {\n              display: 'inline-block'\n            },\n            children: [\"Step \", activeStep + 1, \" already completed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleComplete,\n            children: completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"ScfQtMjocTEEPsQJA4wuJiaPwNA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/domsardina/Development/nfinite-test/client/src/App.js"],"names":["useState","AppBar","Box","Button","Step","StepButton","Stepper","Toolbar","Typography","steps","App","activeStep","setActiveStep","completed","setCompleted","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","step","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","flexGrow","margin","width","map","label","index","mt","mb","display","flexDirection","pt","mr","flex"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport {\n  AppBar,\n  Box,\n  Button,\n  Step,\n  StepButton,\n  Stepper,\n  Toolbar,\n  Typography,\n} from '@mui/material';\n\nconst steps = ['Products', 'Results'];\n\nconst App = () => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [completed, setCompleted] = useState({});\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const completedSteps = () => {\n    return Object.keys(completed).length;\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps();\n  };\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed,\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !(i in completed))\n        : activeStep + 1;\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleStep = (step) => () => {\n    setActiveStep(step);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  };\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 1 }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n              nfinite - Product Upload Test\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Box sx={{ margin: '20px auto', width: '75%' }}>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => (\n            <Step key={label}>\n              <StepButton color=\"inherit\" onClick={handleStep(index)}>\n                {label}\n              </StepButton>\n            </Step>\n          ))}\n        </Stepper>\n\n        <>\n          <Typography sx={{ mt: 2, mb: 1 }}>Step {activeStep + 1}</Typography>\n          <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n            <Button\n              color=\"inherit\"\n              disabled={activeStep === 0}\n              onClick={handleBack}\n              sx={{ mr: 1 }}\n            >\n              Back\n            </Button>\n            <Box sx={{ flex: '1 1 auto' }} />\n            <Button onClick={handleNext} sx={{ mr: 1 }}>\n              Next\n            </Button>\n            {activeStep !== steps.length &&\n              (completed[activeStep] ? (\n                <Typography variant=\"caption\" sx={{ display: 'inline-block' }}>\n                  Step {activeStep + 1} already completed\n                </Typography>\n              ) : (\n                <Button onClick={handleComplete}>\n                  {completedSteps() === totalSteps() - 1\n                    ? 'Finish'\n                    : 'Complete Step'}\n                </Button>\n              ))}\n          </Box>\n        </>\n      </Box>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}