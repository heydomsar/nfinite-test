{"ast":null,"code":"var _jsxFileName = \"/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport Paper from '@mui/material/Paper';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageTwo = ({\n  data = []\n}) => {\n  _s();\n\n  const [rows, setRows] = useState(); //   const processImage = (src) => {\n  //     return new Promise((resolve, reject) => {\n  //       var request = new XMLHttpRequest();\n  //       request.open('GET', src);\n  //       request.responseType = 'blob';\n  //       request.onload = function () {\n  //         if (request.status === 200) {\n  //           console.log('success');\n  //           const img = new Image();\n  //           img.onload = () => {\n  //             console.log('onload', img.width);\n  //             return resolve({\n  //               width: img.width,\n  //               height: img.height,\n  //             });\n  //           };\n  //           img.src = src;\n  //         } else {\n  //           console.log('fail');\n  //           resolve({\n  //             width: 0,\n  //             height: 0,\n  //           });\n  //         }\n  //       };\n  //       request.send();\n  //     });\n  //   };\n\n  const processImage = src => {\n    const img = new Image();\n\n    img.onload = () => {\n      console.log('onload', img.width);\n      return {\n        width: img.width,\n        height: img.height\n      };\n    };\n\n    img.onerror = () => {\n      console.log('fail');\n      return {\n        width: 0,\n        height: 0\n      };\n    };\n\n    img.src = src;\n  };\n\n  const createRow = row => {\n    console.log('row', row);\n\n    if (row.width && row.width !== 0) {\n      return /*#__PURE__*/_jsxDEV(SuccessRow, {\n        row: row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ErrorRow, {\n      row: row\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 12\n    }, this);\n  };\n\n  const aggregateData = () => {\n    const mergedData = data.map(async row => {\n      const dimensions = await processImage(row.url);\n      console.log('dimensions', dimensions);\n      return { ...row,\n        width: dimensions.width,\n        height: dimensions.height\n      };\n    });\n    console.log('mergedData', mergedData);\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650,\n        maxWidth: 800,\n        margin: '0 auto'\n      },\n      \"aria-label\": \"simple table\",\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows && rows.map(row => createRow(row))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PageTwo, \"cMn46HMmfsVf4gpe7bT6j+QWbN0=\");\n\n_c = PageTwo;\nexport default PageTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageTwo\");","map":{"version":3,"sources":["/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx"],"names":["useEffect","useState","Table","TableBody","TableContainer","Paper","SuccessRow","ErrorRow","PageTwo","data","rows","setRows","processImage","src","img","Image","onload","console","log","width","height","onerror","createRow","row","aggregateData","mergedData","map","dimensions","url","minWidth","maxWidth","margin"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport Paper from '@mui/material/Paper';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\n\nconst PageTwo = ({ data = [] }) => {\n  const [rows, setRows] = useState();\n\n  //   const processImage = (src) => {\n  //     return new Promise((resolve, reject) => {\n  //       var request = new XMLHttpRequest();\n  //       request.open('GET', src);\n  //       request.responseType = 'blob';\n\n  //       request.onload = function () {\n  //         if (request.status === 200) {\n  //           console.log('success');\n  //           const img = new Image();\n  //           img.onload = () => {\n  //             console.log('onload', img.width);\n  //             return resolve({\n  //               width: img.width,\n  //               height: img.height,\n  //             });\n  //           };\n  //           img.src = src;\n  //         } else {\n  //           console.log('fail');\n  //           resolve({\n  //             width: 0,\n  //             height: 0,\n  //           });\n  //         }\n  //       };\n\n  //       request.send();\n  //     });\n  //   };\n\n  const processImage = (src) => {\n    const img = new Image();\n    img.onload = () => {\n      console.log('onload', img.width);\n      return {\n        width: img.width,\n        height: img.height,\n      };\n    };\n\n    img.onerror = () => {\n      console.log('fail');\n      return {\n        width: 0,\n        height: 0,\n      };\n    };\n    img.src = src;\n  };\n\n  const createRow = (row) => {\n    console.log('row', row);\n    if (row.width && row.width !== 0) {\n      return <SuccessRow row={row} />;\n    }\n    return <ErrorRow row={row} />;\n  };\n\n  const aggregateData = () => {\n    const mergedData = data.map(async (row) => {\n      const dimensions = await processImage(row.url);\n      console.log('dimensions', dimensions);\n      return { ...row, width: dimensions.width, height: dimensions.height };\n    });\n    console.log('mergedData', mergedData);\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table\n        sx={{ minWidth: 650, maxWidth: 800, margin: '0 auto' }}\n        aria-label=\"simple table\"\n      >\n        <TableBody>{rows && rows.map((row) => createRow(row))}</TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default PageTwo;\n"]},"metadata":{},"sourceType":"module"}