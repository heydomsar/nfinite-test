{"ast":null,"code":"var _jsxFileName = \"/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Table, TableBody, TableContainer, Paper } from '@mui/material/';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageTwo = ({\n  data = []\n}) => {\n  _s();\n\n  const [rows, setRows] = useState();\n\n  const processUrl = async src => {\n    var result = await fetch(src);\n\n    if (result.ok) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const processImage = async src => {\n    let img;\n    const imageLoadPromise = new Promise(resolve => {\n      img = new Image();\n      img.onload = resolve;\n      img.src = src;\n    });\n    await imageLoadPromise;\n    return {\n      width: img.width,\n      height: img.height\n    };\n  };\n\n  const createRow = row => {\n    if (row.width && row.width !== 0) {\n      return /*#__PURE__*/_jsxDEV(SuccessRow, {\n        row: row\n      }, row.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ErrorRow, {\n      row: row\n    }, row.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);\n  };\n\n  const aggregateData = async () => {\n    const mergedData = await Promise.all(data.map(async row => {\n      const isValidUrl = await processUrl(row.url);\n\n      if (isValidUrl) {\n        const dimensions = await processImage(row.url);\n        return { ...row,\n          width: dimensions.width,\n          height: dimensions.height\n        };\n      } else {\n        return { ...row,\n          width: 0,\n          height: 0\n        };\n      }\n    }));\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650,\n        maxWidth: 800,\n        margin: '0 auto'\n      },\n      \"aria-label\": \"simple table\",\n      children: /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows && rows.map(row => createRow(row))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PageTwo, \"cMn46HMmfsVf4gpe7bT6j+QWbN0=\");\n\n_c = PageTwo;\nexport default PageTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageTwo\");","map":{"version":3,"sources":["/Users/domsardina/Development/nfinite-test/client/src/pages/PageTwo.jsx"],"names":["useEffect","useState","Table","TableBody","TableContainer","Paper","SuccessRow","ErrorRow","PageTwo","data","rows","setRows","processUrl","src","result","fetch","ok","processImage","img","imageLoadPromise","Promise","resolve","Image","onload","width","height","createRow","row","id","aggregateData","mergedData","all","map","isValidUrl","url","dimensions","minWidth","maxWidth","margin"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Table, TableBody, TableContainer, Paper } from '@mui/material/';\nimport SuccessRow from '../components/SuccessRow';\nimport ErrorRow from '../components/ErrorRow';\n\nconst PageTwo = ({ data = [] }) => {\n  const [rows, setRows] = useState();\n\n  const processUrl = async (src) => {\n    var result = await fetch(src);\n    if (result.ok) {\n      return true;\n    }\n    return false;\n  };\n\n  const processImage = async (src) => {\n    let img;\n    const imageLoadPromise = new Promise((resolve) => {\n      img = new Image();\n      img.onload = resolve;\n      img.src = src;\n    });\n\n    await imageLoadPromise;\n    return {\n      width: img.width,\n      height: img.height,\n    };\n  };\n\n  const createRow = (row) => {\n    if (row.width && row.width !== 0) {\n      return <SuccessRow key={row.id} row={row} />;\n    }\n    return <ErrorRow key={row.id} row={row} />;\n  };\n\n  const aggregateData = async () => {\n    const mergedData = await Promise.all(\n      data.map(async (row) => {\n        const isValidUrl = await processUrl(row.url);\n        if (isValidUrl) {\n          const dimensions = await processImage(row.url);\n          return { ...row, width: dimensions.width, height: dimensions.height };\n        } else {\n          return { ...row, width: 0, height: 0 };\n        }\n      })\n    );\n    setRows(mergedData);\n  };\n\n  useEffect(() => {\n    aggregateData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table\n        sx={{ minWidth: 650, maxWidth: 800, margin: '0 auto' }}\n        aria-label=\"simple table\"\n      >\n        <TableBody>{rows && rows.map((row) => createRow(row))}</TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default PageTwo;\n"]},"metadata":{},"sourceType":"module"}